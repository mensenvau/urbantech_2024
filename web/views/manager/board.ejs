<link rel="stylesheet" href="/css/board.css" />

<div class="mb-3">
    <h4>Board</h4>
    <div id="kanban-board">
        <div class="column" data-status="To-Do">
            <h6>To-Do</h6>
            <div class="task-container" id="to-do"></div>
            <button class="btn btn-sm btn-primary mt-4" onclick="openModal('to-do')">Add Task</button>
        </div>
        <div class="column" data-status="In Progress">
            <h6>In Progress</h6>
            <div class="task-container" id="in-progress"></div>
            <button class="btn btn-sm btn-primary mt-4" onclick="openModal('in-progress')">Add Task</button>
        </div>
        <div class="column" data-status="Testing">
            <h6>Testing</h6>
            <div class="task-container" id="testing"></div>
            <button class="btn btn-sm btn-primary mt-4" onclick="openModal('testing')">Add Task</button>
        </div>
        <div class="column" data-status="Review">
            <h6>Review</h6>
            <div class="task-container" id="review"></div>
            <button class="btn btn-sm btn-primary mt-4" onclick="openModal('review')">Add Task</button>
        </div>
    </div>

    <!-- Modal for Adding Tasks -->
    <div id="task-modal" class="modal" onclick="handleModalBackgroundClick(event)">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h4>Add New Task</h4>
            <form id="task-form">
                <input type="hidden" id="column-id" />
                <label for="task-name">Task Name:</label>
                <input type="text" class="form-control" id="task-name" required />

                <label for="task-desc">Description:</label>
                <textarea class="form-control" id="task-desc" required></textarea>

                <label for="task-start">Start Date:</label>
                <input class="form-control" type="date" id="task-start" required />

                <label for="task-end">End Date:</label>
                <input class="form-control" type="date" id="task-end" required />

                <div class="mt-4">
                    <button class="btn btn-sm btn-primary" type="submit">Add Task</button>
                    <button class="btn btn-sm btn-danger" type="button" onclick="closeModal()">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        let taskId = 0;

        // Open the modal and set the target column ID
        function openModal(columnId) {
            document.getElementById("task-modal").style.display = "flex";
            document.getElementById("column-id").value = columnId; // Store column ID for later
        }

        // Close the modal
        function closeModal() {
            document.getElementById("task-modal").style.display = "none";
            document.getElementById("task-form").reset(); // Clear form inputs
        }

        // Handle clicks on the modal background
        function handleModalBackgroundClick(event) {
            const modalContent = document.querySelector(".modal-content");
            if (!modalContent.contains(event.target)) {
                closeModal(); // Close modal if click is outside the content
            }
        }

        // Add a task to a column based on the form input
        function addTask(event) {
            event.preventDefault();

            const columnId = document.getElementById("column-id").value;
            const taskName = document.getElementById("task-name").value;
            const taskStart = document.getElementById("task-start").value;
            const taskEnd = document.getElementById("task-end").value;
            const taskDesc = document.getElementById("task-desc").value;

            const taskContainer = document.getElementById(columnId);
            // const taskContainer = column.querySelector(".task-container");

            const task = document.createElement("div");
            task.className = "task";
            task.draggable = true;
            task.id = `task-${taskId++}`;

            // Create task inner structure with labels
            task.innerHTML = `
        <div class="task-content">
            <strong class="task-title">Title:</strong> <span>${taskName}</span>
            <div class="task-desc">
            <strong>Description:</strong>
            <p class="desc-text">${taskDesc}</p>
            <p class="desc-text"><strong>Created at</strong>: ${taskStart}</p>
            <p class="desc-text"><strong>Due To:</strong> ${taskEnd}</p>
            </div>
        </div>
    `;
            // task.innerHTML = `<strong>${taskName}</strong><p>${taskStart}</p><p>${taskEnd}</p><p>${taskDesc}</p>`;

            // Add drag event listeners
            task.addEventListener("dragstart", handleDragStart);
            task.addEventListener("dragend", handleDragEnd);

            taskContainer.appendChild(task);
            closeModal(); // Close the modal after adding the task
        }

        // Drag-and-drop handlers
        function handleDragStart(event) {
            event.dataTransfer.setData("text/plain", event.target.id);
            event.target.classList.add("dragging");
        }

        function handleDragEnd(event) {
            event.target.classList.remove("dragging");
        }

        function allowDrop(event) {
            event.preventDefault();
        }

        function handleDrop(event) {
            event.preventDefault();
            const taskId = event.dataTransfer.getData("text/plain");
            const task = document.getElementById(taskId);
            const taskContainer = event.target.closest(".task-container");
            if (taskContainer) {
                taskContainer.appendChild(task);
            }
        }

        // Add drag-and-drop listeners to columns
        document.querySelectorAll(".task-container").forEach((container) => {
            container.addEventListener("dragover", allowDrop);
            container.addEventListener("drop", handleDrop);
        });

        // Add event listener for form submission
        document.getElementById("task-form").addEventListener("submit", addTask);

        // Expose modal functions to global scope
        window.openModal = openModal;
        window.closeModal = closeModal;
        window.handleModalBackgroundClick = handleModalBackgroundClick;

        // Function to add a default task
        function addTaskDefault(columnId, taskName, taskStart, taskEnd, taskDesc) {
            const taskContainer = document.getElementById(columnId);

            // Create a task element
            const task = document.createElement("div");
            task.className = "task";
            task.draggable = true;
            task.id = `task-${taskId++}`;

            task.innerHTML = `
        <div class="task-content">
            <strong class="task-title">Title:</strong> <span>${taskName}</span>
            <div class="task-desc">
                <strong>Description:</strong>
                <p class="desc-text">${taskDesc}</p>
                <p class="desc-text"><strong>Created at:</strong> ${taskStart}</p>
                <p class="desc-text"><strong>Due To:</strong> ${taskEnd}</p>
            </div>
        </div>
    `;

            // Add drag event listeners
            task.addEventListener("dragstart", handleDragStart);
            task.addEventListener("dragend", handleDragEnd);

            // Append the task to the specified column
            taskContainer.appendChild(task);
        }

        // Add tasks programmatically to reach the 10th task
        for (let i = 1; i < 3; i++) {
            setTimeout(() => {
                addTaskDefault(
                    "to-do", // Add all tasks to "To-Do" column, or change as needed
                    `Task ${i}`, // Dynamic task name
                    "2024-11-16", // Start date
                    "2024-11-20", // End date
                    `Description for Task ${i}` // Dynamic description
                );
            }, i * 100); // Stagger tasks slightly to avoid rendering issues
        }

        // Add tasks programmatically to reach the 10th task
        for (let i = 3; i <= 3; i++) {
            setTimeout(() => {
                addTaskDefault(
                    "in-progress", // Add all tasks to "To-Do" column, or change as needed
                    `Task ${i}`, // Dynamic task name
                    "2024-11-16", // Start date
                    "2024-11-20", // End date
                    `Description for Task ${i}` // Dynamic description
                );
            }, i * 100); // Stagger tasks slightly to avoid rendering issues
        }
    });
</script>
